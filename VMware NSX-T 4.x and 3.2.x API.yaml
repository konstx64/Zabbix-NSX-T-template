zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
  templates:
    - uuid: 937bae2a2dd148bd8b94d612728e799f
      template: 'VMware NSX-T 4.x and 3.2.x API'
      name: 'VMware NSX-T 4.x and 3.2.x API'
      description: |
        This template is designed to collect data on the status of NSX-T core components.
        Please note that, depending on the size of the infrastructure and the number of objects in it, you may encounter the NSX-T API rate limit, which is set to 100 by default.
        It is recommended to either use manager nodes behind a load balancer to distribute API requests or adjust the rate limiter value using the command from CLI:
        set service http client-api-rate-limit 200
      vendor:
        name: github.com/konstx64
        version: 1.0-3
      groups:
        - name: Templates/Applications
      items:
        - uuid: 61fedda0866b4ffbafb4d903e3e0a2f9
          name: 'Management cluster overall status'
          type: DEPENDENT
          key: nsxt.cluster.overal_status
          delay: '0'
          value_type: CHAR
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.detailed_cluster_status.overall_status
          master_item:
            key: nsxt.cluster_services
          triggers:
            - uuid: 5db209c9818b4ce2afb019f9d04f3ea7
              expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.cluster.overal_status,#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.cluster.overal_status,#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.cluster.overal_status,#1)<>"STABLE"'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.cluster.overal_status,#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.cluster.overal_status,#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.cluster.overal_status,#1)="STABLE"'
              name: 'NSX cluster state changed'
              priority: AVERAGE
              manual_close: 'YES'
        - uuid: 6129afd4cc9d47c8962932f11d83ef86
          name: 'cluster services'
          type: HTTP_AGENT
          key: nsxt.cluster_services
          delay: 3m
          history: '0'
          value_type: TEXT
          trends: '0'
          authtype: BASIC
          username: '{$NSX.USERNAME}'
          password: '{$NSX.PASSWORD}'
          url: 'https://{$NSX.URL}/api/v1/cluster/status'
          headers:
            - name: Content-Type
              value: application/json
      discovery_rules:
        - uuid: 24cad395396a4763aa3157231ce187a0
          name: 'NSX-T EdgeNodes discovery'
          type: HTTP_AGENT
          key: nsxt.edgenodes.discovery
          delay: 1h
          authtype: BASIC
          username: '{$NSX.USERNAME}'
          password: '{$NSX.PASSWORD}'
          item_prototypes:
            - uuid: 7d4cc1e0e96a4127af70759e19b7fe85
              name: 'EdgeNode {#EDGENODE_NAME} configuration state'
              type: DEPENDENT
              key: 'nsxt.edgenode.conf.state[{#EDGENODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.node_deployment_state.state
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: 'nsxt.edgenode.state.master[{#EDGENODE_ID}]'
              tags:
                - tag: component
                  value: EdgeNode
                - tag: EdgeNode
                  value: '{#EDGENODE_NAME} {#EDGENODE_ID}'
              trigger_prototypes:
                - uuid: 2e1934303a8b44029476520a345f481d
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.conf.state[{#EDGENODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.conf.state[{#EDGENODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.conf.state[{#EDGENODE_ID}])<>"NODE_READY"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.conf.state[{#EDGENODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.conf.state[{#EDGENODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.conf.state[{#EDGENODE_ID}])="NODE_READY"'
                  name: 'Edge Node {#EDGENODE_NAME} configuration state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: 6f8351684cd44a34ab328b1b3d9821b5
              name: 'EdgeNode {#EDGENODE_NAME} datapath memory utilization'
              type: DEPENDENT
              key: 'nsxt.edgenode.datapath.mem[{#EDGENODE_ID}]'
              delay: '0'
              value_type: FLOAT
              trends: '0'
              units: '%'
              description: 'Utilization of CPU cores that handle system and layer-7 related processing'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.node_status.system_status.edge_mem_usage.datapath_total_usage
              master_item:
                key: 'nsxt.edgenode.status.master[{#EDGENODE_ID}]'
              tags:
                - tag: component
                  value: EdgeNode
                - tag: EdgeNode
                  value: '{#EDGENODE_NAME} {#EDGENODE_ID}'
              trigger_prototypes:
                - uuid: dc336407e924493886d844fa470cf57d
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.datapath.mem[{#EDGENODE_ID}])>{$DATAPATH.MEM.HIGH}'
                  name: 'EdgeNode {#EDGENODE_NAME} datapath memory utilization high'
                  priority: WARNING
                  description: 'Overall memory utilization of datapath, including heap memory, memory pool and resident memory'
                  manual_close: 'YES'
            - uuid: 1685aca456544f33bb385740373b6681
              name: 'EdgeNode {#EDGENODE_NAME} DPDK CPU utilization'
              type: DEPENDENT
              key: 'nsxt.edgenode.dpdk.cpu.util[{#EDGENODE_ID}]'
              delay: '0'
              value_type: FLOAT
              trends: '0'
              units: '%'
              description: 'Utilization of CPU cores handling fast packet processing using DPDK'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.node_status.system_status.cpu_usage.avg_cpu_core_usage_dpdk
              master_item:
                key: 'nsxt.edgenode.status.master[{#EDGENODE_ID}]'
              tags:
                - tag: component
                  value: EdgeNode
                - tag: EdgeNode
                  value: '{#EDGENODE_NAME} {#EDGENODE_ID}'
              trigger_prototypes:
                - uuid: ed33d9688f764481aae9118c07835235
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.dpdk.cpu.util[{#EDGENODE_ID}],#1)>{$DATAPATH.CPU.HIGH}'
                  name: 'EdgeNode {#EDGENODE_NAME} DPDK CPU utilization'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: 72957b7e887c44b3b67a58c9b457fbc6
              name: 'EdgeNode {#EDGENODE_NAME} services CPU utilization'
              type: DEPENDENT
              key: 'nsxt.edgenode.services.cpu.util[{#EDGENODE_ID}]'
              delay: '0'
              value_type: FLOAT
              trends: '0'
              units: '%'
              description: 'Utilization of CPU cores that handle system and layer-7 related processing'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.node_status.system_status.cpu_usage.avg_cpu_core_usage_non_dpdk
              master_item:
                key: 'nsxt.edgenode.status.master[{#EDGENODE_ID}]'
              tags:
                - tag: component
                  value: EdgeNode
                - tag: EdgeNode
                  value: '{#EDGENODE_NAME} {#EDGENODE_ID}'
              trigger_prototypes:
                - uuid: 8a405a9c14884c938c47e2a0bbbce5cb
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.services.cpu.util[{#EDGENODE_ID}],#1)>{$SYS.CPU.HIGH}'
                  name: 'EdgeNode {#EDGENODE_NAME} services CPU utilization'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: 410d0f13c5e242d0a89389c516de827c
              name: '{#EDGENODE_NAME}  state master Item'
              type: HTTP_AGENT
              key: 'nsxt.edgenode.state.master[{#EDGENODE_ID}]'
              delay: 5m
              history: '0'
              value_type: TEXT
              trends: '0'
              authtype: BASIC
              username: '{$NSX.USERNAME}'
              password: '{$NSX.PASSWORD}'
              url: 'https://{$NSX.URL}/api/v1/transport-nodes/{#EDGENODE_ID}/state'
              headers:
                - name: Content-Type
                  value: application/json
              tags:
                - tag: component
                  value: EdgeNode
                - tag: EdgeNode
                  value: '{#EDGENODE_NAME} {#EDGENODE_ID}'
            - uuid: 2e3211c860f04e70a064316d00181943
              name: 'EdgeNode {#EDGENODE_NAME}  overal state'
              type: DEPENDENT
              key: 'nsxt.edgenode.state[{#EDGENODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.state
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: 'nsxt.edgenode.state.master[{#EDGENODE_ID}]'
              tags:
                - tag: component
                  value: EdgeNode
                - tag: EdgeNode
                  value: '{#EDGENODE_NAME} {#EDGENODE_ID}'
              trigger_prototypes:
                - uuid: 90cf24d631e6493494a25fcd325f7293
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.state[{#EDGENODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.state[{#EDGENODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.state[{#EDGENODE_ID}])<>"success"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.state[{#EDGENODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.state[{#EDGENODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.state[{#EDGENODE_ID}])="success"'
                  name: 'Edge Node {#EDGENODE_NAME}  overal state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: f51e41c660ce48c19bcd19a38493f24e
              name: '{#EDGENODE_NAME} status master Item'
              type: HTTP_AGENT
              key: 'nsxt.edgenode.status.master[{#EDGENODE_ID}]'
              delay: 5m
              history: '0'
              value_type: TEXT
              trends: '0'
              authtype: BASIC
              username: '{$NSX.USERNAME}'
              password: '{$NSX.PASSWORD}'
              url: 'https://{$NSX.URL}/api/v1/transport-nodes/{#EDGENODE_ID}/status'
              headers:
                - name: Content-Type
                  value: application/json
              tags:
                - tag: component
                  value: EdgeNode
                - tag: EdgeNode
                  value: '{#EDGENODE_NAME} {#EDGENODE_ID}'
            - uuid: 1b15d70ccb904a3b97bd5c22c18f538b
              name: 'EdgeNode {#EDGENODE_NAME} system memory utilization'
              type: DEPENDENT
              key: 'nsxt.edgenode.system.mem[{#EDGENODE_ID}]'
              delay: '0'
              value_type: FLOAT
              trends: '0'
              units: '%'
              description: 'Utilization of RAM on EdgeNode'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.node_status.system_status.edge_mem_usage.datapath_total_usage
              master_item:
                key: 'nsxt.edgenode.status.master[{#EDGENODE_ID}]'
              tags:
                - tag: component
                  value: EdgeNode
                - tag: EdgeNode
                  value: '{#EDGENODE_NAME} {#EDGENODE_ID}'
              trigger_prototypes:
                - uuid: c6b56cf3426a46489ab9828bceb661a5
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.edgenode.system.mem[{#EDGENODE_ID}])>{$SYS.MEM.HIGH}'
                  name: 'EdgeNode {#EDGENODE_NAME} system memory utilization high'
                  priority: WARNING
                  manual_close: 'YES'
          url: 'https://{$NSX.URL}/api/v1/transport-nodes'
          query_fields:
            - name: node_types
              value: EdgeNode
            - name: page_size
              value: '1000'
          headers:
            - name: Content-Type
              value: application/json
          lld_macro_paths:
            - lld_macro: '{#EDGENODE_ID}'
              path: $..id.first()
            - lld_macro: '{#EDGENODE_NAME}'
              path: $..display_name.first()
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results[*]'
        - uuid: 0980fef722e542b58f53d68b985f6b68
          name: 'NSX-T Appliance nodes discovery'
          type: HTTP_AGENT
          key: nsxt.managers.discovery
          delay: 6h
          authtype: BASIC
          username: '{$NSX.USERNAME}'
          password: '{$NSX.PASSWORD}'
          item_prototypes:
            - uuid: 50159a07e3b447d8a5e1aee124c880e2
              name: '{#NODE_NAME} CLUSTER_BOOT_MANAGER state'
              type: DEPENDENT
              key: 'nsxt.manager.cl_boot_manager[{#NODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.detailed_cluster_status.groups[?(@.group_type == "CLUSTER_BOOT_MANAGER")].group_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: nsxt.cluster_services
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: bd3ed2cd41fe455eadefbe8c7f697c4d
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_boot_manager[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_boot_manager[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_boot_manager[{#NODE_ID}])<>"STABLE"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_boot_manager[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_boot_manager[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_boot_manager[{#NODE_ID}])="STABLE"'
                  name: '{#NODE_NAME} CLUSTER_BOOT_MANAGER state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: 38006095d3c049c8b84eedfc1000edca
              name: '{#NODE_NAME} cluser DATASTORE state'
              type: DEPENDENT
              key: 'nsxt.manager.cl_datstore_dependent[{#NODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.detailed_cluster_status.groups[?(@.group_type == "DATASTORE")].group_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: nsxt.cluster_services
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: 31213b72b0184a8d9c3139fac4e74b03
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_datstore_dependent[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_datstore_dependent[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_datstore_dependent[{#NODE_ID}])<>"STABLE"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_datstore_dependent[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_datstore_dependent[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cl_datstore_dependent[{#NODE_ID}])="STABLE"'
                  name: '{#NODE_NAME} cluser DATASTORE state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: 0675a4e39fc64d93aab4a715f0b1eb1f
              name: '{#NODE_NAME} CM-INVENTORY state'
              type: DEPENDENT
              key: 'nsxt.manager.cm-inventory[{#NODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.detailed_cluster_status.groups[?(@.group_type == "CM-INVENTORY")].group_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: nsxt.cluster_services
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: df5aba3aba774dc1b4ffea15ae075152
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cm-inventory[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cm-inventory[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cm-inventory[{#NODE_ID}])<>"STABLE"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cm-inventory[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cm-inventory[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.cm-inventory[{#NODE_ID}])="STABLE"'
                  name: '{#NODE_NAME} CM-INVENTORY state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: 4103f678abeb45b4bc1a2991867494f0
              name: '{#NODE_NAME} connection state'
              type: HTTP_AGENT
              key: 'nsxt.manager.conn_status[{#NODE_ID}]'
              delay: 10m
              value_type: CHAR
              trends: '0'
              authtype: BASIC
              username: '{$NSX.USERNAME}'
              password: '{$NSX.PASSWORD}'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.mgmt_cluster_status.mgmt_cluster_status
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              url: 'https://{$NSX.URL}/api/v1/cluster/nodes/{#NODE_ID}/status'
              headers:
                - name: Content-Type
                  value: application/json
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: 0792f60e9e124ecbb20df2446127d05e
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.conn_status[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.conn_status[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.conn_status[{#NODE_ID}])<>"CONNECTED"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.conn_status[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.conn_status[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.conn_status[{#NODE_ID}])="CONNECTED"'
                  name: '{#NODE_NAME} connection state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: b84629d15e6c4b9aafe044e7f0746307
              name: '{#NODE_NAME} CONTROLLER state'
              type: DEPENDENT
              key: 'nsxt.manager.controller[{#NODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.detailed_cluster_status.groups[?(@.group_type == "CONTROLLER")].group_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: nsxt.cluster_services
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: 6d9673b37fd6444aab66d6a121e218bf
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.controller[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.controller[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.controller[{#NODE_ID}])<>"STABLE"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.controller[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.controller[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.controller[{#NODE_ID}])="STABLE"'
                  name: '{#NODE_NAME} CONTROLLER state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: f3f4c4a2a75b437fa37ab2390653ec3c
              name: '{#NODE_NAME} CORFU_NONCONFIG state'
              type: DEPENDENT
              key: 'nsxt.manager.corfu_nonconfig[{#NODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.detailed_cluster_status.groups[?(@.group_type == "CORFU_NONCONFIG")].group_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: nsxt.cluster_services
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: fab679000801444ba2fa37b77a49a951
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.corfu_nonconfig[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.corfu_nonconfig[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.corfu_nonconfig[{#NODE_ID}],#1)<>"STABLE"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.corfu_nonconfig[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.corfu_nonconfig[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.corfu_nonconfig[{#NODE_ID}],#1)="STABLE"'
                  name: '{#NODE_NAME} CORFU_NONCONFIG state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: 70b2bee795d8472494f1a9462219bc4c
              name: '{#NODE_NAME} HTTPS state'
              type: DEPENDENT
              key: 'nsxt.manager.https[{#NODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.detailed_cluster_status.groups[?(@.group_type == "HTTPS")].group_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: nsxt.cluster_services
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: a84af058deb04f1eae08a1119f674320
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.https[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.https[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.https[{#NODE_ID}])<>"STABLE"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.https[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.https[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.https[{#NODE_ID}])="STABLE"'
                  name: '{#NODE_NAME} HTTPS state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: 3eb6ad9ff2e341339824e0d588031356
              name: '{#NODE_NAME} IDPS_REPORTING state'
              type: DEPENDENT
              key: 'nsxt.manager.idps_reporting[{#NODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.detailed_cluster_status.groups[?(@.group_type == "IDPS_REPORTING")].group_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: nsxt.cluster_services
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: ebac08e1ebc54edb876c63320467b675
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.idps_reporting[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.idps_reporting[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.idps_reporting[{#NODE_ID}])<>"STABLE"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.idps_reporting[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.idps_reporting[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.idps_reporting[{#NODE_ID}])="STABLE"'
                  name: '{#NODE_NAME} IDPS_REPORTING state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: b20238ca426b48039408b663d3333845
              name: '{#NODE_NAME} MANAGER state'
              type: DEPENDENT
              key: 'nsxt.manager.manager[{#NODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.detailed_cluster_status.groups[?(@.group_type == "MANAGER")].group_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: nsxt.cluster_services
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: f259a3c0e05348f0857548f46b272a6c
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.manager[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.manager[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.manager[{#NODE_ID}])<>"STABLE"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.manager[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.manager[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.manager[{#NODE_ID}])="STABLE"'
                  name: '{#NODE_NAME} id {#NODE_ID} MANAGER state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: 87a21899fb1147b494dfd4cfe674fa03
              name: '{#NODE_NAME} MONITORING state'
              type: DEPENDENT
              key: 'nsxt.manager.monitoring[{#NODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.detailed_cluster_status.groups[?(@.group_type == "MONITORING")].group_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: nsxt.cluster_services
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: db6054000e9a4b1b864f761853b69514
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.monitoring[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.monitoring[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.monitoring[{#NODE_ID}])<>"STABLE"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.monitoring[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.monitoring[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.monitoring[{#NODE_ID}])="STABLE"'
                  name: '{#NODE_NAME} MONITORING state'
                  priority: WARNING
            - uuid: 56a6c352accd404d9d97afefd832376e
              name: '{#NODE_NAME} MESSAGING-MANAGER state'
              type: DEPENDENT
              key: 'nsxt.manager.msg-manager[{#NODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.detailed_cluster_status.groups[?(@.group_type == "MESSAGING-MANAGER")].group_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: nsxt.cluster_services
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: a67bc51be1214fb3a1529d0552343486
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.msg-manager[{#NODE_ID}],#1) <> last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.msg-manager[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.msg-manager[{#NODE_ID}])<>"STABLE"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.msg-manager[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.msg-manager[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.msg-manager[{#NODE_ID}])="STABLE"'
                  name: '{#NODE_NAME} MESSAGING-MANAGER state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: 172c500deaec49b1a025e1e35d30ddfa
              name: '{#NODE_NAME} SITE_MANAGER state'
              type: DEPENDENT
              key: 'nsxt.manager.site_manager[{#NODE_ID}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.detailed_cluster_status.groups[?(@.group_type == "SITE_MANAGER")].group_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              master_item:
                key: nsxt.cluster_services
              tags:
                - tag: component
                  value: 'NSX Manager nodes'
                - tag: 'NSX Manager'
                  value: '{#NODE_NAME} {#NODE_ID}'
              trigger_prototypes:
                - uuid: 38e277144d834d83818b12b5652a0776
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.site_manager[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.site_manager[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.site_manager[{#NODE_ID}])<>"STABLE"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.site_manager[{#NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.site_manager[{#NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.manager.site_manager[{#NODE_ID}])="STABLE"'
                  name: '{#NODE_NAME} SITE_MANAGER state'
                  priority: WARNING
                  manual_close: 'YES'
          url: 'https://{$NSX.URL}/api/v1/cluster'
          headers:
            - name: Content-Type
              value: application/json
          lld_macro_paths:
            - lld_macro: '{#NODE_ID}'
              path: $..node_uuid.first()
            - lld_macro: '{#NODE_NAME}'
              path: $..fqdn.first()
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.nodes[*]'
        - uuid: ae5d986e0329468bb55274e4094e523b
          name: 'NSX-T T0 gateways discovery'
          type: HTTP_AGENT
          key: nsxt.T0s.discovery
          delay: 1h
          authtype: BASIC
          username: '{$NSX.USERNAME}'
          password: '{$NSX.PASSWORD}'
          item_prototypes:
            - uuid: 22f11b540aab46379cefeff65d4f9554
              name: '{#T0_NAME} with path {#T0_PATH} overal state'
              type: HTTP_AGENT
              key: 'nsxt.T0s.state.[{#T0_ID}]'
              delay: 5m
              value_type: CHAR
              trends: '0'
              authtype: BASIC
              username: '{$NSX.USERNAME}'
              password: '{$NSX.PASSWORD}'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.results[*].status.consolidated_status.consolidated_status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              url: 'https://{$NSX.URL}/policy/api/v1/search'
              query_fields:
                - name: query
                  value: 'resource_type:Tier0 AND path:"{#T0_PATH}"'
              headers:
                - name: Content-Type
                  value: application/json
              tags:
                - tag: component
                  value: 'T0 Gateways'
                - tag: 'T0 Gateway'
                  value: '{#T0_NAME} {#T0_ID}'
              trigger_prototypes:
                - uuid: 07901c625e82412f8e6908739181b608
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.T0s.state.[{#T0_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.T0s.state.[{#T0_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.T0s.state.[{#T0_ID}])<>"SUCCESS"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.T0s.state.[{#T0_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.T0s.state.[{#T0_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.T0s.state.[{#T0_ID}])="SUCCESS"'
                  name: '{#T0_NAME} with path {#T0_PATH} overal state'
                  priority: WARNING
                  manual_close: 'YES'
          url: 'https://{$NSX.URL}/api/v1/logical-routers'
          query_fields:
            - name: page_size
              value: '1000'
            - name: router_type
              value: TIER0
          headers:
            - name: Content-Type
              value: application/json
          lld_macro_paths:
            - lld_macro: '{#T0_ID}'
              path: $..id.first()
            - lld_macro: '{#T0_NAME}'
              path: $..display_name.first()
            - lld_macro: '{#T0_PATH}'
              path: $..tag.first()
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results[*]'
        - uuid: 8c4e625f8bf14043b9ae21656004d6a9
          name: 'NSX-T Host transport nodes discovery'
          type: HTTP_AGENT
          key: nsxt.tn.nodes.discovery
          delay: 1h
          authtype: BASIC
          username: '{$NSX.USERNAME}'
          password: '{$NSX.PASSWORD}'
          item_prototypes:
            - uuid: 944b4aaed947483a8756c9603990092d
              name: '{#TN_NODE_NAME} deployment state'
              type: HTTP_AGENT
              key: 'nsxt.tn.node.deployment.state[{#TN_NODE_ID}]'
              delay: 5m
              value_type: CHAR
              trends: '0'
              authtype: BASIC
              username: '{$NSX.USERNAME}'
              password: '{$NSX.PASSWORD}'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.node_deployment_state.state
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              url: 'https://{$NSX.URL}/api/v1/transport-nodes/{#TN_NODE_ID}/state'
              tags:
                - tag: component
                  value: HostTransportNode
              trigger_prototypes:
                - uuid: d4e06806140b469485a45e90ea681cc0
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.node.deployment.state[{#TN_NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.node.deployment.state[{#TN_NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.node.deployment.state[{#TN_NODE_ID}])<>"success"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.node.deployment.state[{#TN_NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.node.deployment.state[{#TN_NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.node.deployment.state[{#TN_NODE_ID}])="success"'
                  name: '{#TN_NODE_NAME} deployment state'
                  priority: WARNING
                  manual_close: 'YES'
            - uuid: 7c7dd19aac224d44b3af0d69b1e562af
              name: '{#TN_NODE_NAME} status'
              type: HTTP_AGENT
              key: 'nsxt.tn.nodes.status[{#TN_NODE_ID}]'
              delay: 5m
              value_type: CHAR
              trends: '0'
              authtype: BASIC
              username: '{$NSX.USERNAME}'
              password: '{$NSX.PASSWORD}'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.state
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              url: 'https://{$NSX.URL}/api/v1/transport-nodes/{#TN_NODE_ID}/state'
              tags:
                - tag: component
                  value: HostTransportNode
              trigger_prototypes:
                - uuid: bf216e80a56e46b1a0b15b7e4bb9ff72
                  expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.nodes.status[{#TN_NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.nodes.status[{#TN_NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.nodes.status[{#TN_NODE_ID}])<>"success"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.nodes.status[{#TN_NODE_ID}],#1)<>last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.nodes.status[{#TN_NODE_ID}],#2) and last(/VMware NSX-T 4.x and 3.2.x API/nsxt.tn.nodes.status[{#TN_NODE_ID}])="success"'
                  name: '{#TN_NODE_NAME} status'
                  priority: WARNING
                  manual_close: 'YES'
          url: 'https://{$NSX.URL}/api/v1/transport-nodes'
          query_fields:
            - name: node_types
              value: HostNode
            - name: page_size
              value: '1000'
          headers:
            - name: Content-Type
              value: application/json
          lld_macro_paths:
            - lld_macro: '{#TN_NODE_ID}'
              path: $..node_id.first()
            - lld_macro: '{#TN_NODE_NAME}'
              path: $..display_name.first()
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results[*]'
      tags:
        - tag: class
          value: software
        - tag: target
          value: NSX
        - tag: target
          value: vmware
      macros:
        - macro: '{$DATAPATH.CPU.HIGH}'
          value: '90'
          description: 'Edge node datapath CPU usage is very high'
        - macro: '{$DATAPATH.MEM.HIGH}'
          value: '85'
          description: 'Overall memory utilization of datapath, including heap memory, memory pool and resident memory'
        - macro: '{$NSX.PASSWORD}'
          description: 'NSX-T API Password'
        - macro: '{$NSX.URL}'
          description: 'NSX-T Manager URL or IP(e.g.,nsx-mgr.example.com) without scheme'
        - macro: '{$NSX.USERNAME}'
          description: 'NSX-T API Username'
        - macro: '{$SYS.CPU.HIGH}'
          value: '80'
          description: 'Edge node CPU usage is very high'
        - macro: '{$SYS.MEM.HIGH}'
          value: '90'
          description: 'EdgeNode Memory utilization'
